--> true
open PROP .
  op s : -> Sys .
  op x : -> Addr .
  red addruse-lm1(init,x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l1 .
  eq (0 < r1) = true .
  eq (r1 < s(N)) = true .
  eq (r2 \in addrInUse(s)) = true .
  red addruse-lm1(s,x) implies addruse-lm1(alloc-n(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l1 .
  eq (0 < r1) = true .
  eq (r1 < s(N)) = true .
  eq (r2 \in addrInUse(s)) = false .
  red addruse-lm1(s,x) implies addruse-lm1(alloc-n(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l1 .
  eq (0 < r1) = true .
  eq (r1 < s(N)) = false .
  red addruse-lm1(s,x) implies addruse-lm1(alloc-n(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l1 .
  eq (0 < r1) = false .
  red addruse-lm1(s,x) implies addruse-lm1(alloc-n(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l1) = false .
  red addruse-lm1(s,x) implies addruse-lm1(alloc-n(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l2 .
  eq (0 < r1) = true .
  eq (r1 < s(N)) = true .
  red addruse-lm1(s,x) implies addruse-lm1(assign-hp(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l2 .
  eq (0 < r1) = true .
  eq (r1 < s(N)) = false .
  red addruse-lm1(s,x) implies addruse-lm1(assign-hp(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l2 .
  eq (0 < r1) = false .
  red addruse-lm1(s,x) implies addruse-lm1(assign-hp(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l2) = false .
  red addruse-lm1(s,x) implies addruse-lm1(assign-hp(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq v(s,r1) = r2 .
  eq pc(s,r1) = l5 .
  red addruse-lm1(s,x) implies addruse-lm1(assign-n(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq v(s,r1) = r2 .
  eq (pc(s,r1) = l5) = false .
  red addruse-lm1(s,x) implies addruse-lm1(assign-n(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (v(s,r1) = r2) = false .
  red addruse-lm1(s,x) implies addruse-lm1(assign-n(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l3 .
  red addruse-lm1(s,x) implies addruse-lm1(assign-p(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l3) = false .
  red addruse-lm1(s,x) implies addruse-lm1(assign-p(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l4 .
  red addruse-lm1(s,x) implies addruse-lm1(assign-v(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l4) = false .
  red addruse-lm1(s,x) implies addruse-lm1(assign-v(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l6 .
  eq p(s,r1) = counter(s) .
  eq n(s,r1) = x .
  eq counter(s) = x .
  red addruse-lm1(s,x) implies addruse-lm1(cas(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l6 .
  eq p(s,r1) = counter(s) .
  eq n(s,r1) = x .
  eq (counter(s) = x) = false .
  eq (x \in addrInUse(s)) = true .
  red addruse-lm1(s,x) implies addruse-lm1(cas(s,r1),x) .
close

--> true, use addruse-lm2 as a lemma
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l6 .
  eq p(s,r1) = counter(s) .
  eq n(s,r1) = x .
  eq (counter(s) = x) = false .
  eq (x \in addrInUse(s)) = false .
  red addruse-lm2(s,r1,x) implies (addruse-lm1(s,x) implies addruse-lm1(cas(s,r1),x)) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l6 .
  eq p(s,r1) = counter(s) .
  eq (n(s,r1) = x) = false .
  red addruse-lm1(s,x) implies addruse-lm1(cas(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l6 .
  eq (p(s,r1) = counter(s)) = false .
  red addruse-lm1(s,x) implies addruse-lm1(cas(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l6) = false .
  red addruse-lm1(s,x) implies addruse-lm1(cas(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f6 .
  red addruse-lm1(s,x) implies addruse-lm1(ch-isfree(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = f6) = false .
  red addruse-lm1(s,x) implies addruse-lm1(ch-isfree(s,r1),x) .
close

--> true, use p6 as a lemma
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq m(s,r1) = r2 .
  eq pc(s,r1) = f7 .
  eq isfree(s,r1) = true .
  eq counter(s) = x .
  eq (x \in addrInUse(s)) = true .
  eq r2 = x .
  red p6(s,r1,x) implies (addruse-lm1(s,x) implies addruse-lm1(free(s,r1,r2),x)) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq m(s,r1) = r2 .
  eq pc(s,r1) = f7 .
  eq isfree(s,r1) = true .
  eq counter(s) = x .
  eq (x \in addrInUse(s)) = true .
  eq (r2 = x) = false .
  red addruse-lm1(s,x) implies addruse-lm1(free(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq m(s,r1) = r2 .
  eq pc(s,r1) = f7 .
  eq isfree(s,r1) = true .
  eq counter(s) = x .
  eq (x \in addrInUse(s)) = false .
  red addruse-lm1(s,x) implies addruse-lm1(free(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq m(s,r1) = r2 .
  eq pc(s,r1) = f7 .
  eq isfree(s,r1) = true .
  eq (counter(s) = x) = false .
  red addruse-lm1(s,x) implies addruse-lm1(free(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq m(s,r1) = r2 .
  eq pc(s,r1) = f7 .
  eq isfree(s,r1) = false .
  red addruse-lm1(s,x) implies addruse-lm1(free(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq m(s,r1) = r2 .
  eq (pc(s,r1) = f7) = false .
  red addruse-lm1(s,x) implies addruse-lm1(free(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq (m(s,r1) = r2) = false .
  red addruse-lm1(s,x) implies addruse-lm1(free(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq p(s,r1) = r2 .
  eq pc(s,r1) = f1 .
  red addruse-lm1(s,x) implies addruse-lm1(insert-p(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq p(s,r1) = r2 .
  eq (pc(s,r1) = f1) = false .
  red addruse-lm1(s,x) implies addruse-lm1(insert-p(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq (p(s,r1) = r2) = false .
  red addruse-lm1(s,x) implies addruse-lm1(insert-p(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f5 .
  eq (r2 \in detached(s,r1)) = true .
  red addruse-lm1(s,x) implies addruse-lm1(pop-detach(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f5 .
  eq (r2 \in detached(s,r1)) = false .
  red addruse-lm1(s,x) implies addruse-lm1(pop-detach(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = f5) = false .
  red addruse-lm1(s,x) implies addruse-lm1(pop-detach(s,r1,r2),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f3 .
  red addruse-lm1(s,x) implies addruse-lm1(rd-detached(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = f3) = false .
  red addruse-lm1(s,x) implies addruse-lm1(rd-detached(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l7 .
  red addruse-lm1(s,x) implies addruse-lm1(reclaim(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l7) = false .
  red addruse-lm1(s,x) implies addruse-lm1(reclaim(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f2 .
  red addruse-lm1(s,x) implies addruse-lm1(set-inuse(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = f2) = false .
  red addruse-lm1(s,x) implies addruse-lm1(set-inuse(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f4 .
  red addruse-lm1(s,x) implies addruse-lm1(set-isfree(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = f4) = false .
  red addruse-lm1(s,x) implies addruse-lm1(set-isfree(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f8 .
  red addruse-lm1(s,x) implies addruse-lm1(upd-detached(s,r1),x) .
close

--> true
open PROP .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = f8) = false .
  red addruse-lm1(s,x) implies addruse-lm1(upd-detached(s,r1),x) .
close

--> Time taken is 574ms