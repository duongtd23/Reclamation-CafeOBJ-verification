** properties for the function reclaim(int *p)
mod* RECLAIM-PROP {
  pr(STACK)

  vars T T2 T3 T4 : UInt
  var S : Sys
  vars X X2 X3 : Addr
  vars I I2 I3 : UInt 

  -- no lm
  op rc-lm1 : Sys UInt Addr -> Bool
  eq rc-lm1(S,T,X) = 
    (not(pc(S,T) = l2) and p(S,T) = X) 
    implies (hp(S,T) = X) .

-- rc-lm4 + safety2
  op rc-lm2 : Sys UInt UInt Addr -> Bool
  eq rc-lm2(S,T,T2,X) = 
   (m(S,T) = X and pc(S,T) = f7 and isfree(S,T) and
    not(T = T2)) 
    implies not(hp(S,T2) = X) .

-- rc-lm6 + p1
  op rc-lm3 : Sys UInt UInt Addr -> Bool
  eq rc-lm3(S,T,T2,X) = 
   (m(S,T) = X and hp(S,T2) = X and not(T = T2) and
    pc(S,T) = f6 and isfree(S,T)) 
    implies (iter(S,T) < T2 + 1) .

-- rc-lm3 + rc-lm5, no ind
  op rc-lm4 : Sys UInt UInt Addr -> Bool
  eq rc-lm4(S,T,T2,X) = 
   (m(S,T) = X and isfree(S,T) and 
    pc(S,T) = f6 and not(iter(S,T) < N or iter(S,T) = N) and
    not(T = T2)) 
    implies not(hp(S,T2) = X) .

-- no lm
  op rc-lm5 : Sys UInt Addr -> Bool 
  eq rc-lm5(S,T,X) = not(T <= N) implies not(hp(S,T) = X) .

-- no lm
  op rc-lm6 : Sys UInt Addr -> Bool 
  eq rc-lm6(S,T,X) = (hp(S,T) = X) implies (0 < T) .

-- rc-detach-lm2
  op rc-lm7 : Sys UInt UInt Addr -> Bool
  eq rc-lm7(S,T,T2,X) = 
    not(m(S,T) = X and m(S,T2) = X and not(T = T2)) . 

-- rc-lm1 + rc-lm2, no ind
  op rc-lm8 : Sys UInt UInt Addr -> Bool
  eq rc-lm8(S,T,T2,X) = 
   (m(S,T) = X and pc(S,T) = f7 and isfree(S,T) and
    not(pc(S,T2) = l2) and not(T = T2)) 
    implies not(p(S,T2) = X) .

** lemmas helpers for detached set
-- rc-detach-lm2 + detached-lm6
  op rc-detach-lm1 : Sys UInt UInt Addr -> Bool
  eq rc-detach-lm1(S,T,T2,X) = (not(T = T2) and
     (X \in detached(S,T) or X \in inuse(S,T)))
    implies not(X \in detached(S,T2) or X \in inuse(S,T2)) .

-- rc-detach-lm1 + rc-lm7 + p23
  op rc-detach-lm2 : Sys UInt UInt Addr -> Bool
  eq rc-detach-lm2(S,T,T2,X) = (m(S,T) = X and not(T = T2))
    implies not(X \in detached(S,T2) or X \in inuse(S,T2)) .

-- rc-detach-lm4
  op rc-detach-lm3 : Sys UInt Addr -> Bool
  eq rc-detach-lm3(S,T,X) = (X \in detached(S,T) and
      (pc(S,T) = f3 or pc(S,T) = f4 or pc(S,T) = f5 or 
       pc(S,T) = f6 or pc(S,T) = f7 or pc(S,T) = f8)) 
    implies not(X \in inuse(S,T)) .

-- rc-detach-lm2 + rc-detach-lm5, no inc
  op rc-detach-lm4 : Sys UInt UInt Addr -> Bool
  eq rc-detach-lm4(S,T,T2,X) = (m(S,T) = X and
      (pc(S,T) = f6 or pc(S,T) = f7)) 
    implies not(X \in detached(S,T2) or X \in inuse(S,T2)) .

-- rc-detach-lm3
  op rc-detach-lm5 : Sys UInt Addr -> Bool
  eq rc-detach-lm5(S,T,X) = (m(S,T) = X and
      (pc(S,T) = f6 or pc(S,T) = f7)) 
    implies not(X \in detached(S,T) or X \in inuse(S,T)) .

** lemmas helpers for address in used 
-- rc-addr-lm2 + rc-lm7
  op rc-addr-lm1 : Sys UInt Addr -> Bool
  eq rc-addr-lm1(S,T,X) = (m(S,T) = X) 
    implies X \in addrInUse(S) .

-- rc-addr-lm1 + addruse-lm1 + rc-detach-lm4
  op rc-addr-lm2 : Sys UInt Addr -> Bool
  eq rc-addr-lm2(S,T,X) = (X \in detached(S,T) or X \in inuse(S,T)) 
    implies X \in addrInUse(S) .

** lemmas about integers
-- it is correct that not(I2 = I3)
-- I2 < I3 same as not(I3 < s(I2)
  op lm1 : UInt UInt UInt -> Bool 
  eq lm1(I,I2,I3) = (not(I < I2) and not(I = I2) and I < s(I3)) 
    implies not(I3 < s(I2)) .
}
mod* PROP {
  ex(RECLAIM-PROP)

  vars T T2 T3 T4 : UInt
  var S : Sys
  vars X X2 X3 : Addr
  vars I I2 I3 : UInt 
  vars XN XN2 : Addr&Nil
  vars K : UInt 

  op instack : Sys Addr Addr&Nil -> Bool
  eq instack(S,X,nil) = false .
  eq instack(S,X,X2) = (X = X2 or instack(S,X,next(S,X2))) .
  eq instack(S,X,XN) = 
    (if XN = nil
    then false
    else (XN = X or instack(S,X,next(S,XN)))
    fi) .

  op nextk : Addr&Nil UInt -> Addr&Nil
  eq nextk(nil,K) = nil .
  eq nextk(XN,0) = XN .
  eq nextk(top(S),s(K)) = nextk(next(S,top(S)),K) .
  eq nextk(next(S,XN),s(K)) = nextk(next(S,next(S,XN)),K) .
  eq nextk(   p(S,T ),s(K)) = nextk(next(S,   p(S,T )),K) .
  eq nextk(  nd(S,T ),s(K)) = nextk(next(S,  nd(S,T )),K) .

-- lemmas
  eq (nextk(next(S,XN),K) = next(S,XN2)) =
    (nextk(XN,K) = XN2) .
  eq next(S,nextk(nd(S,T ),K)) = nextk(nd(S,T ),s(K)) .

-- macros
  op starting-reclaim : Sys UInt Addr -> Bool
  eq starting-reclaim(S,T,X) = (p(S,T) = X and
      (pc(S,T) = l7 or pc(S,T) = f1 or pc(S,T) = f2)) .

  op before-cas : Sys UInt Addr -> Bool
  eq before-cas(S,T,X) = (n(S,T) = X and
    (pc(S,T) = l4 or pc(S,T) = l5 or pc(S,T) = l6)) .

  op before-cas2 : Sys UInt Addr -> Bool
  eq before-cas2(S,T,X) = (nd(S,T) = X and
    (pc(S,T) = l9 or pc(S,T) = l10 or pc(S,T) = l11 or pc(S,T) = l12)) .

-- p15 + rc-lm8
  op safety1 : Sys UInt -> Bool
  eq safety1(S,T) = (pc(S,T) = l4 or pc(S,T) = l5) 
    implies not(p(S,T) = nil or val(S,p(S,T)) = null) .

-- prove by p1, no ind
  op safety2 : Sys UInt Addr -> Bool
  eq safety2(S,T,X) = 
   (m(S,T) = X and pc(S,T) = f7 and isfree(S,T)) 
    implies not(top(S) = X) .

-- prove by p10, no ind
  op safety3 : Sys UInt Addr UInt -> Bool
  eq safety3(S,T,X,K) = 
   (m(S,T) = X and pc(S,T) = f7 and isfree(S,T)) 
    implies not(nextk(top(S),K) = X) .

-- prove by p10, no ind
  op p1 : Sys UInt Addr -> Bool
  eq p1(S,T,X) = 
    (m(S,T) = X) 
    implies not(top(S) = X) .

-- p3 + rc-lm8
  op p2 : Sys UInt -> Bool
  eq p2(S,T) = (pc(S,T) = l6)
    implies (n(S,T) = next(S,p(S,T))) .

-- addruse-lm3 + safety1 + p34 + p21
  op p3 : Sys UInt UInt -> Bool
  eq p3(S,T,T2) = 
    ((pc(S,T2) = l4 or pc(S,T2) = l5 or pc(S,T2) = l6 or 
      (pc(S,T2) = l3 and not(p(S,T2) = nil)))
      and not(T = T2))
    implies not(nd(S,T) = p(S,T2)) .

-- p7, no ind
  op p4 : Sys UInt -> Bool
  eq p4(S,T) = not(top(S) = nil)
    implies not(nd(S,T) = top(S)) .

-- addruse-lm5
  op p5 : Sys UInt UInt Addr -> Bool
  eq p5(S,T,T2,X) = 
    (nd(S,T) = X and not(T = T2))
    implies not(nd(S,T2) = X) .

-- p5 + p7 + p8, no ind
  op p6 : Sys UInt UInt Addr UInt -> Bool
  eq p6(S,T,T2,X,K) = 
    (pc(S,T2) = l12 and tp(S,T2) = top(S) and 
     nd(S,T) = X and not(T = T2))
    implies not(nextk(nd(S,T2),K) = X) .

-- addruse-lm4 + p11 + p6
  op p7 : Sys UInt Addr UInt -> Bool
  eq p7(S,T,X,K) = (nd(S,T) = X)
    implies not(nextk(top(S),K) = X) .

-- p13 + p12
  op p8 : Sys UInt -> Bool
  eq p8(S,T) = (pc(S,T) = l12)
    implies (tp(S,T) = next(S,nd(S,T))) .

-- p8 + p10 + p13, no ind
  op p9 : Sys UInt UInt Addr UInt -> Bool
  eq p9(S,T,T2,X,K) = 
    (pc(S,T2) = l12 and tp(S,T2) = top(S) and 
     m(S,T) = X)
    implies not(nextk(nd(S,T2),K) = X) .

-- p11 + p9 + detached-lm5
  op p10 : Sys UInt Addr UInt -> Bool
  eq p10(S,T,X,K) = (m(S,T) = X) 
    implies not(nextk(top(S),K) = X) .

-- p2 + p10 + p7, no ind
  op p11 : Sys UInt UInt Addr UInt -> Bool
  eq p11(S,T,T2,X,K) = 
    (pc(S,T2) = l6 and p(S,T2) = top(S) and
     (m(S,T) = X or nd(S,T) = X))
    implies not(nextk(n(S,T2),K) = X) .

-- p5 + p14, no ind
  op p12 : Sys UInt UInt -> Bool
  eq p12(S,T,T2) = 
    (pc(S,T) = l12 and not(T = T2))
    implies not(nd(S,T2) = nd(S,T)) .

-- rc-addr-lm1 + detached-lm3
  op p13 : Sys UInt UInt Addr -> Bool
  eq p13(S,T,T2,X) = 
    (m(S,T) = X)
    implies not(nd(S,T2) = X) .

-- no lm
  op p14 : Sys UInt -> Bool
  eq p14(S,T) = (pc(S,T) = l9 or pc(S,T) = l10 or 
      pc(S,T) = l11 or pc(S,T) = l12)
    implies not(nd(S,T) = nil) .

-- p33 + rc-lm8
  op p15 : Sys UInt -> Bool
  eq p15(S,T) = 
    (pc(S,T) = l3 and not(p(S,T) = nil)) 
    implies not(p(S,T) = nil or val(S,p(S,T)) = null) .

-- p20, no ind
  op p16 : Sys UInt -> Bool
  eq p16(S,T) = not(top(S) = nil)
    implies not(val(S,top(S)) = null) .

-- p20 + p2 + addruse-lm4, no ind
  op p17 : Sys UInt Addr UInt -> Bool
  eq p17(S,T,X,K) = 
    (pc(S,T) = l6 and p(S,T) = top(S) and
     nextk(n(S,T),K) = X)
    implies (not(val(S,X) = null) and
      X \in addrInUse(S)) .

-- p19 + p20 + p8 + addruse-lm4 + addruse-lm5, no ind
  op p18 : Sys UInt Addr UInt -> Bool
  eq p18(S,T,X,K) = 
    (pc(S,T) = l12 and tp(S,T) = top(S) and 
     nextk(nd(S,T),K) = X)
    implies (not(val(S,X) = null) and
      X \in addrInUse(S)) .

-- p13
  op p19 : Sys UInt Addr -> Bool
  eq p19(S,T,X) = 
   (nd(S,T) = X and
    (pc(S,T) = l12 or pc(S,T) = l11 or pc(S,T) = l10))
    implies not(val(S,X) = null) .

-- safety3 + p17 + p18
  op p20 : Sys Addr UInt -> Bool
  eq p20(S,X,K) = (nextk(top(S),K) = X)
    implies not(val(S,X) = null) .

-- safety1
  op p21 : Sys UInt -> Bool
  eq p21(S,T) = (pc(S,T) = l6)
    implies not(p(S,T) = nil) .

-- p24, no ind
  op p22 : Sys UInt Addr -> Bool
  eq p22(S,T,X) = starting-reclaim(S,T,X)
    implies not(top(S) = X) .

-- p1 + p4 + addruse-lm1 + detached-lm6
  op p23 : Sys UInt UInt Addr -> Bool
  eq p23(S,T,T2,X) = starting-reclaim(S,T,X)
    implies (not(nd(S,T2) = X) and
      (T2 = T or not(m(S,T2) = X))) .

-- p26 + p27 + p28
  op p24 : Sys UInt Addr UInt -> Bool
  eq p24(S,T,X,K) = starting-reclaim(S,T,X)
    implies not(nextk(top(S),K) = X) .

-- p22
  op p25 : Sys UInt UInt Addr -> Bool
  eq p25(S,T,T2,X) = (starting-reclaim(S,T,X) and not(T = T2))
    implies not starting-reclaim(S,T2,X) . 

-- p24 + p2, no ind
  op p26 : Sys UInt UInt Addr UInt -> Bool
  eq p26(S,T,T2,X,K) = 
    (pc(S,T2) = l6 and p(S,T2) = top(S) and
     starting-reclaim(S,T,X) and not(T = T2))
    implies not(nextk(n(S,T2),K) = X) .

-- p23 + p24 + p8, no ind
  op p28 : Sys UInt UInt Addr UInt -> Bool
  eq p28(S,T,T2,X,K) = 
    (pc(S,T2) = l12 and tp(S,T2) = top(S) and 
     starting-reclaim(S,T,X) and not(T = T2))
    implies not(nextk(nd(S,T2),K) = X) .

-- p2 + p32, no ind
  op p27 : Sys UInt UInt -> Bool
  eq p27(S,T,K) = 
    (pc(S,T) = l6 and p(S,T) = top(S) and not(top(S) = nil))
    implies not(nextk(n(S,T),K) = top(S)) .

-- p8, no ind
  op p29 : Sys UInt UInt -> Bool
  eq p29(S,T,K) = (pc(S,T) = l12 and tp(S,T) = nil)
    implies (nextk(next(S,nd(S,T)),K) = nil) .

-- p8 + p32, no ind
  op p30 : Sys UInt UInt -> Bool
  eq p30(S,T,K) = (not(top(S) = nil) and
    pc(S,T) = l12 and tp(S,T) = top(S))
    implies not(nextk(next(S,nd(S,T)), K) = nd(S,T)) .

-- p2 + p32, no ind
  op p31 : Sys UInt UInt -> Bool
  eq p31(S,T,K) = (not(top(S) = nil) and
    pc(S,T) = l6 and p(S,T) = top(S))
    implies not(nextk(next(S,n(S,T)), K) = n(S,T)) .

-- p2 + p4 + p31 + p30 + p29
  op p32 : Sys UInt -> Bool
  eq p32(S,K) = not(top(S) = nil)
    implies not(nextk(next(S,top(S)), K) = top(S)) .

-- p16 + rc-lm2
  op p33 : Sys UInt -> Bool
  eq p33(S,T) = (pc(S,T) = l2 and not(hp(S,T) = nil))
    implies not(val(S,hp(S,T)) = null) .

-- p4 + addr-lm6
  op p34 : Sys UInt UInt -> Bool
  eq p34(S,T,T2) = 
    (pc(S,T2) = l2 and not(hp(S,T2) = nil) and
      not(T = T2))
    implies not(nd(S,T) = hp(S,T2)) .

** lemmas helpers for detached set
-- detached-lm5, no ind
  op detached-lm1 : Sys UInt Addr -> Bool
  eq detached-lm1(S,T,X) = (top(S) = X)
    implies not(X \in detached(S,T) or X \in inuse(S,T)) .

-- detached-lm5 + p2, no ind
  op detached-lm2 : Sys UInt UInt Addr UInt -> Bool
  eq detached-lm2(S,T,T2,X,K) = 
    (pc(S,T) = l6 and p(S,T) = top(S) and
     nextk(n(S,T),K) = X)
    implies not(X \in detached(S,T2) or X \in inuse(S,T2)) .

-- rc-addr-lm2 + p13 + p23
  op detached-lm3 : Sys UInt UInt Addr -> Bool
  eq detached-lm3(S,T,T2,X) = (nd(S,T) = X)
    implies not(X \in detached(S,T2) or X \in inuse(S,T2)) .

-- detached-lm3 + detached-lm5 + p8, no ind
  op detached-lm4 : Sys UInt UInt Addr UInt -> Bool
  eq detached-lm4(S,T,T2,X,K) = 
    (pc(S,T) = l12 and tp(S,T) = top(S) and 
     nextk(nd(S,T),K) = X)
    implies not(X \in detached(S,T2) or X \in inuse(S,T2)) .

-- p10 + p24 + detached-lm2 + detached-lm4
  op detached-lm5 : Sys UInt Addr UInt -> Bool
  eq detached-lm5(S,T,X,K) = (nextk(top(S),K) = X)
    implies not(X \in detached(S,T) or X \in inuse(S,T)) .

-- detached-lm1 + p23 + p25
  op detached-lm6 : Sys UInt UInt Addr -> Bool
  eq detached-lm6(S,T,T2,X) = 
    (starting-reclaim(S,T,X) and not(T = T2)) 
    implies not(X \in detached(S,T2) or X \in inuse(S,T2)) .

** lemmas helpers for address in used 
-- rc-lm8 + addruse-lm2
  op addruse-lm1 : Sys UInt Addr -> Bool
  eq addruse-lm1(S,T,X) = starting-reclaim(S,T,X) 
    implies X \in addrInUse(S) .

-- addruse-lm4, no ind
  op addruse-lm2 : Sys Addr -> Bool
  eq addruse-lm2(S,X) = (top(S) = X) 
    implies X \in addrInUse(S) .

-- addruse-lm6 + rc-lm8
  op addruse-lm3 : Sys UInt Addr -> Bool
  eq addruse-lm3(S,T,X) = (p(S,T) = X and
      (pc(S,T) = l4 or pc(S,T) = l5 or pc(S,T) = l6 or pc(S,T) = l3))
    implies X \in addrInUse(S) .

-- p10 + p17 + p18
  op addruse-lm4 : Sys Addr UInt -> Bool
  eq addruse-lm4(S,X,K) = (nextk(top(S),K) = X)
    implies X \in addrInUse(S) .

-- p13
  op addruse-lm5 : Sys UInt Addr -> Bool
  eq addruse-lm5(S,T,X) = (nd(S,T) = X)
    implies X \in addrInUse(S) .

-- addruse-lm2 + rc-lm2
  op addruse-lm6 : Sys UInt Addr -> Bool
  eq addruse-lm6(S,T,X) = (pc(S,T) = l2 and hp(S,T) = X) 
    implies X \in addrInUse(S) .
}
eof
load properties.cafe .