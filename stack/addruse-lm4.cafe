--> true
open PROP .
  op k : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  red addruse-lm4(init,x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l8 .
  eq (0 < r1) = true .
  eq (r1 < s(N)) = true .
  eq (r2 \in addrInUse(s)) = true .
  red addruse-lm4(s,x,k) implies addruse-lm4(alloc-n(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l8 .
  eq (0 < r1) = true .
  eq (r1 < s(N)) = true .
  eq (r2 \in addrInUse(s)) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(alloc-n(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l8 .
  eq (0 < r1) = true .
  eq (r1 < s(N)) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(alloc-n(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l8 .
  eq (0 < r1) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(alloc-n(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l8) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(alloc-n(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l1 .
  eq (0 < r1) = true .
  eq (r1 < s(N)) = true .
  red addruse-lm4(s,x,k) implies addruse-lm4(assign-hp(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l1 .
  eq (0 < r1) = true .
  eq (r1 < s(N)) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(assign-hp(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l1 .
  eq (0 < r1) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(assign-hp(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l1) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(assign-hp(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l5 .
  red addruse-lm4(s,x,k) implies addruse-lm4(assign-n(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l5) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(assign-n(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l2 .
  red addruse-lm4(s,x,k) implies addruse-lm4(assign-p(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l2) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(assign-p(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l4 .
  red addruse-lm4(s,x,k) implies addruse-lm4(assign-v(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l4) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(assign-v(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l6 .
  eq top(s) = p(s,r1) .
  eq nextk(n(s,r1),k) = x .
  eq nextk(p(s,r1),k) = x .
  red addruse-lm4(s,x,k) implies addruse-lm4(cas(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l6 .
  eq top(s) = p(s,r1) .
  eq nextk(n(s,r1),k) = x .
  eq (nextk(p(s,r1),k) = x) = false .
  eq (x \in addrInUse(s)) = true .
  red addruse-lm4(s,x,k) implies addruse-lm4(cas(s,r1),x,k) .
close

--> true, use p17 as a lemma
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l6 .
  eq top(s) = p(s,r1) .
  eq nextk(n(s,r1),k) = x .
  eq (nextk(p(s,r1),k) = x) = false .
  eq (x \in addrInUse(s)) = false .
  red p17(s,r1,x,k) implies (addruse-lm4(s,x,k) implies addruse-lm4(cas(s,r1),x,k)) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l6 .
  eq top(s) = p(s,r1) .
  eq (nextk(n(s,r1),k) = x) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(cas(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l6 .
  eq (top(s) = p(s,r1)) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(cas(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l6) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(cas(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l12 .
  eq top(s) = tp(s,r1) .
  eq nextk(nd(s,r1),k) = x .
  eq nextk(tp(s,r1),k) = x .
  red addruse-lm4(s,x,k) implies addruse-lm4(cas2(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l12 .
  eq top(s) = tp(s,r1) .
  eq nextk(nd(s,r1),k) = x .
  eq (nextk(tp(s,r1),k) = x) = false .
  eq (x \in addrInUse(s)) = true .
  red addruse-lm4(s,x,k) implies addruse-lm4(cas2(s,r1),x,k) .
close

--> true, use p18 as a lemma
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l12 .
  eq top(s) = tp(s,r1) .
  eq nextk(nd(s,r1),k) = x .
  eq (nextk(tp(s,r1),k) = x) = false .
  eq (x \in addrInUse(s)) = false .
  red p18(s,r1,x,k) implies (addruse-lm4(s,x,k) implies addruse-lm4(cas2(s,r1),x,k)) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l12 .
  eq top(s) = tp(s,r1) .
  eq (nextk(nd(s,r1),k) = x) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(cas2(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l12 .
  eq (top(s) = tp(s,r1)) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(cas2(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l12) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(cas2(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f6 .
  red addruse-lm4(s,x,k) implies addruse-lm4(ch-isfree(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = f6) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(ch-isfree(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l3 .
  red addruse-lm4(s,x,k) implies addruse-lm4(ch-p(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l3) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(ch-p(s,r1),x,k) .
close

--> true, use p10 as a lemma
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f7 .
  eq m(s,r1) = r2 .
  eq isfree(s,r1) = true .
  eq nextk(top(s),k) = x .
  eq (x \in addrInUse(s)) = true .
  eq r2 = x .
  red p10(s,r1,x,k) implies (addruse-lm4(s,x,k) implies addruse-lm4(free(s,r1,r2),x,k)) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f7 .
  eq m(s,r1) = r2 .
  eq isfree(s,r1) = true .
  eq nextk(top(s),k) = x .
  eq (x \in addrInUse(s)) = true .
  eq (r2 = x) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(free(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f7 .
  eq m(s,r1) = r2 .
  eq isfree(s,r1) = true .
  eq nextk(top(s),k) = x .
  eq (x \in addrInUse(s)) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(free(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f7 .
  eq m(s,r1) = r2 .
  eq isfree(s,r1) = true .
  eq (nextk(top(s),k) = x) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(free(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f7 .
  eq m(s,r1) = r2 .
  eq isfree(s,r1) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(free(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f7 .
  eq (m(s,r1) = r2) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(free(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = f7) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(free(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f1 .
  eq p(s,r1) = r2 .
  red addruse-lm4(s,x,k) implies addruse-lm4(insert-p(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f1 .
  eq (p(s,r1) = r2) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(insert-p(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = f1) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(insert-p(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l10 .
  red addruse-lm4(s,x,k) implies addruse-lm4(load-top(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l10) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(load-top(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f5 .
  eq (r2 \in detached(s,r1)) = true .
  red addruse-lm4(s,x,k) implies addruse-lm4(pop-detach(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f5 .
  eq (r2 \in detached(s,r1)) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(pop-detach(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> Addr .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = f5) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(pop-detach(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f3 .
  red addruse-lm4(s,x,k) implies addruse-lm4(rd-detached(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = f3) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(rd-detached(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l7 .
  red addruse-lm4(s,x,k) implies addruse-lm4(reclaim(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l7) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(reclaim(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = idle .
  red addruse-lm4(s,x,k) implies addruse-lm4(run-pop(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = idle) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(run-pop(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = idle .
  red addruse-lm4(s,x,k) implies addruse-lm4(run-push(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = idle) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(run-push(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f2 .
  red addruse-lm4(s,x,k) implies addruse-lm4(set-inuse(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = f2) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(set-inuse(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f4 .
  red addruse-lm4(s,x,k) implies addruse-lm4(set-isfree(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = f4) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(set-isfree(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l11 .
  red addruse-lm4(s,x,k) implies addruse-lm4(set-next(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l11) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(set-next(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = l9 .
  red addruse-lm4(s,x,k) implies addruse-lm4(set-val(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op r2 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = l9) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(set-val(s,r1,r2),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq pc(s,r1) = f8 .
  red addruse-lm4(s,x,k) implies addruse-lm4(upd-detached(s,r1),x,k) .
close

--> true
open PROP .
  op k : -> UInt .
  op r1 : -> UInt .
  op s : -> Sys .
  op x : -> Addr .
  eq (pc(s,r1) = f8) = false .
  red addruse-lm4(s,x,k) implies addruse-lm4(upd-detached(s,r1),x,k) .
close

--> Time taken is 1714ms