ipsgopen PROP .
  inv p3(S:Sys, T:UInt, T2:UInt) .
  inv rc-lm8(S:Sys, T:UInt, T2:UInt, X:Addr) .
  generate p2(S:Sys, T:UInt) induction on S:Sys .
close
set-output p2.cafe .
:save-proof .
-- eof

ipsgopen PROP .
  inv addruse-lm3(S:Sys, T:UInt, X:Addr) .
  inv safety1(S:Sys, T:UInt) .
  inv p21(S:Sys, T:UInt) .
  inv p34(S:Sys, T:UInt, T2:UInt) .
  generate p3(S:Sys, T:UInt, T2:UInt) induction on S:Sys .
close
set-output p3.cafe .
:save-proof .

ipsgopen PROP .
  inv addruse-lm5(S:Sys, T:UInt, X:Addr) .
  generate p5(S:Sys, T:UInt, T2:UInt, X:Addr) induction on S:Sys .
close
set-output p5.cafe .
:save-proof .
-- eof

ipsgopen PROP .
  inv p6(S:Sys, T:UInt, T2:UInt, X:Addr, K:UInt) .
  inv p11(S:Sys, T:UInt, T2:UInt, X:Addr, K:UInt) .
  inv addruse-lm4(S:Sys, X:Addr, K:UInt) .
  generate p7(S:Sys, T:UInt, X:Addr, K:UInt) induction on S:Sys .
close
set-output p7.cafe .
:save-proof .
-- eof

ipsgopen PROP .
  inv p12(S:Sys, T:UInt, T2:UInt) .
  inv p13(S:Sys, T:UInt, T2:UInt, X:Addr) .
  generate p8(S:Sys, T:UInt) induction on S:Sys .
close
set-output p8.cafe .
:save-proof .
-- eof

ipsgopen PROP .
  inv detached-lm5(S:Sys, T2:UInt, X:Addr, K:UInt) .
  inv p9(S:Sys, T:UInt, T2:UInt, X:Addr, K:UInt) .
  inv p11(S:Sys, T:UInt, T2:UInt, X:Addr, K:UInt) .
  generate p10(S:Sys, T:UInt, X:Addr, K:UInt) induction on S:Sys .
close
set-output p10.cafe .
:save-proof .
-- eof

ipsgopen PROP .
  inv rc-addr-lm1(S:Sys, T:UInt, X:Addr) .
  inv detached-lm3(S:Sys, T:UInt, T2:UInt, X:Addr) .
  generate p13(S:Sys, T:UInt, T2:UInt, X:Addr) induction on S:Sys .
close
set-output p13.cafe .
:save-proof .
-- eof

ipsgopen PROP .
  generate p14(S:Sys, T:UInt) induction on S:Sys .
close
set-output p14.cafe .
:save-proof .
-- eof

ipsgopen PROP .
  inv safety1(S:Sys, T:UInt) .
  generate p21(S:Sys, T:UInt) induction on S:Sys .
close
set-output p21.cafe .
:save-proof .
-- eof

ipsgopen PROP .
  inv p4(S:Sys, T:UInt) .
  inv addruse-lm6(S:Sys, T:UInt, X:Addr) .
  generate p34(S:Sys, T:UInt, T2:UInt) induction on S:Sys .
close
set-output p34.cafe .
:save-proof .
eof

load properties.cafe .
load inputs/input2.cafe .