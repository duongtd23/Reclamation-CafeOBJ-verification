ipsgopen PROP .
  inv addruse-lm2(S:Sys, X:Addr) .
  inv rc-lm8(S:Sys, T:UInt, T2:UInt, X:Addr) .
  generate addruse-lm1(S:Sys, T:UInt, X:Addr) induction on S:Sys .
close
set-output addruse-lm1.cafe .
:save-proof .
-- eof

ipsgopen PROP .
  inv addruse-lm6(S:Sys, T:UInt, X:Addr) .
  inv rc-lm8(S:Sys, T:UInt, T2:UInt, X:Addr) .
  generate addruse-lm3(S:Sys, T:UInt, X:Addr) induction on S:Sys .
close
set-output addruse-lm3.cafe .
:save-proof .
-- eof

ipsgopen PROP .
  inv p10(S:Sys, T:UInt, X:Addr, K:UInt) .
  inv p17(S:Sys,T:UInt,X:Addr,K:UInt) .
  inv p18(S:Sys,T:UInt,X:Addr,K:UInt) .
  generate addruse-lm4(S:Sys, X:Addr, K:UInt) induction on S:Sys .
close
set-output addruse-lm4.cafe .
:save-proof .
-- eof

ipsgopen PROP .
  inv p13(S:Sys,T:UInt,T2:UInt,X:Addr) .
  generate addruse-lm5(S:Sys, T:UInt, X:Addr) induction on S:Sys .
close
set-output addruse-lm5.cafe .
:save-proof .
-- eof

ipsgopen PROP .
  inv addruse-lm2(S:Sys, X:Addr) .
  inv rc-lm2(S:Sys, T:UInt, T2:UInt, X:Addr) .
  generate addruse-lm6(S:Sys, T:UInt, X:Addr) induction on S:Sys .
close
set-output addruse-lm6.cafe .
:save-proof .
eof

load properties.cafe .
load inputs/input-addruse-lm.cafe .
